


CREATE TRIGGER after_insert_movimiento
AFTER INSERT ON Movimiento
FOR EACH ROW
BEGIN
    INSERT INTO History (Movimiento_ID, Tipo_Operacion, Tipo, Fecha_movimiento, Entrada_ID, Salida_ID)
    VALUES (NEW.ID, 'INSERT', NEW.Tipo, NEW.Fecha_movimiento, NEW.Entrada_ID, NEW.Salida_ID);
END;


CREATE TRIGGER after_update_movimiento
AFTER UPDATE ON Movimiento
FOR EACH ROW
BEGIN
    INSERT INTO History (Movimiento_ID, Tipo_Operacion, Tipo, Fecha_movimiento, Entrada_ID, Salida_ID)
    VALUES (NEW.ID, 'UPDATE', NEW.Tipo, NEW.Fecha_movimiento, NEW.Entrada_ID, NEW.Salida_ID);
END;


CREATE TRIGGER after_delete_movimiento
AFTER DELETE ON Movimiento
FOR EACH ROW
BEGIN
    INSERT INTO History (Movimiento_ID, Tipo_Operacion, Tipo, Fecha_movimiento, Entrada_ID, Salida_ID)
    VALUES (OLD.ID, 'DELETE', OLD.Tipo, OLD.Fecha_movimiento, OLD.Entrada_ID, OLD.Salida_ID);
END;


DELIMITER $$

CREATE TRIGGER actualizar_stock_entrada
AFTER INSERT ON Detalle_Entrada
FOR EACH ROW
BEGIN
    -- Actualizar el stock del medicamento correspondiente
    UPDATE Medicamento
    SET Stock = Stock + NEW.Cantidad
    WHERE ID = NEW.Medicamento_ID;

    -- Insertar el movimiento en la tabla Movimiento
    INSERT INTO Movimiento (Tipo, Fecha_movimiento, Entrada_ID)
    VALUES ('Ingreso', CURDATE(), NEW.Entrada_ID);
END$$

DELIMITER ;



DELIMITER $$

CREATE TRIGGER actualizar_stock_salida
AFTER INSERT ON Detalle_Salida
FOR EACH ROW
BEGIN
    -- Actualizar el stock del medicamento correspondiente
    UPDATE Medicamento
    SET Stock = Stock - NEW.Cantidad
    WHERE ID = NEW.Medicamento_ID;

    -- Insertar el movimiento en la tabla Movimiento
    INSERT INTO Movimiento (Tipo, Fecha_movimiento, Salida_ID)
    VALUES ('Salida', CURDATE(), NEW.Salida_ID);
END$$



DROP TRIGGER venta_datos_cliente;

DELIMITER ;

/*Insertar en tabla cliente de venta*/
DELIMITER $$
CREATE TRIGGER venta_datos_cliente
AFTER INSERT ON Cliente
FOR EACH ROW
    INSERT INTO Cliente (DNI, Nombre, Apellido_Pat,Apellido_Mat)
    VALUES (NEW.ID, NEW.Nombre, NEW.Apellido_Pat,NEW.Apellido_Mat);
BEGIN
END$$

DELIMITER ;


/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/*********************************PRUEBAS*****************************/
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/


##################################################################################
##################################################################################
###########################Disparadores###########################################
##################################################################################
##################################################################################

DELIMITER //

CREATE TRIGGER tr_ActualizarCaja AFTER INSERT ON Salida
FOR EACH ROW
BEGIN
  DECLARE saldo_inicial DECIMAL(10, 2);
  DECLARE fecha_actual DATE;
  
  SET fecha_actual = CURDATE();
  
  -- Verificar si ya existe un registro para la fecha actual y el vendedor espec√≠fico
  SELECT Saldo_Final INTO saldo_inicial 
  FROM Caja 
  WHERE Fecha = fecha_actual AND Vendedor_ID = NEW.Vendedor_ID;
  
  IF saldo_inicial IS NULL THEN
    -- Si no existe un registro, insertar uno nuevo
    INSERT INTO Caja (Fecha, Saldo_Inicial, Saldo_Final, Vendedor_ID)
    VALUES (fecha_actual, NEW.Monto_Total, NEW.Monto_Total, NEW.Vendedor_ID);
  ELSE
    -- Si existe, actualizar el saldo final
    UPDATE Caja 
    SET Saldo_Final = Saldo_Final + NEW.Monto_Total
    WHERE Fecha = fecha_actual AND Vendedor_ID = NEW.Vendedor_ID;
  END IF;
END //

DELIMITER ;

SHOW TRIGGERS;
